/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ScrapedCompanies } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateScrapedCompanies(options?: Omit<(UseMutationOptions<(ScrapedCompanies | undefined), DefaultError, Prisma.ScrapedCompaniesCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ScrapedCompaniesCreateArgs, DefaultError, ScrapedCompanies, true>('ScrapedCompanies', 'POST', `${endpoint}/scrapedCompanies/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ScrapedCompaniesCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ScrapedCompaniesCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ScrapedCompanies, Prisma.ScrapedCompaniesGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ScrapedCompaniesCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ScrapedCompanies, Prisma.ScrapedCompaniesGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyScrapedCompanies(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ScrapedCompaniesCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ScrapedCompaniesCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ScrapedCompanies', 'POST', `${endpoint}/scrapedCompanies/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ScrapedCompaniesCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ScrapedCompaniesCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ScrapedCompaniesCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesFindManyArgs, TQueryFnData = Array<Prisma.ScrapedCompaniesGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ScrapedCompaniesFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/findMany`, args, options, fetch);
}

export function useInfiniteFindManyScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesFindManyArgs, TQueryFnData = Array<Prisma.ScrapedCompaniesGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ScrapedCompaniesFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/findMany`, args, options, fetch);
}

export function useSuspenseFindManyScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesFindManyArgs, TQueryFnData = Array<Prisma.ScrapedCompaniesGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ScrapedCompaniesFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesFindManyArgs, TQueryFnData = Array<Prisma.ScrapedCompaniesGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ScrapedCompaniesFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/findMany`, args, options, fetch);
}

export function useFindUniqueScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesFindUniqueArgs, TQueryFnData = Prisma.ScrapedCompaniesGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ScrapedCompaniesFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesFindUniqueArgs, TQueryFnData = Prisma.ScrapedCompaniesGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ScrapedCompaniesFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/findUnique`, args, options, fetch);
}

export function useFindFirstScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesFindFirstArgs, TQueryFnData = Prisma.ScrapedCompaniesGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ScrapedCompaniesFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesFindFirstArgs, TQueryFnData = Prisma.ScrapedCompaniesGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ScrapedCompaniesFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/findFirst`, args, options, fetch);
}

export function useUpdateScrapedCompanies(options?: Omit<(UseMutationOptions<(ScrapedCompanies | undefined), DefaultError, Prisma.ScrapedCompaniesUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ScrapedCompaniesUpdateArgs, DefaultError, ScrapedCompanies, true>('ScrapedCompanies', 'PUT', `${endpoint}/scrapedCompanies/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ScrapedCompaniesUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ScrapedCompaniesUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ScrapedCompanies, Prisma.ScrapedCompaniesGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ScrapedCompaniesUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ScrapedCompanies, Prisma.ScrapedCompaniesGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyScrapedCompanies(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ScrapedCompaniesUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ScrapedCompaniesUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ScrapedCompanies', 'PUT', `${endpoint}/scrapedCompanies/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ScrapedCompaniesUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ScrapedCompaniesUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ScrapedCompaniesUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertScrapedCompanies(options?: Omit<(UseMutationOptions<(ScrapedCompanies | undefined), DefaultError, Prisma.ScrapedCompaniesUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ScrapedCompaniesUpsertArgs, DefaultError, ScrapedCompanies, true>('ScrapedCompanies', 'POST', `${endpoint}/scrapedCompanies/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ScrapedCompaniesUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ScrapedCompaniesUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ScrapedCompanies, Prisma.ScrapedCompaniesGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ScrapedCompaniesUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ScrapedCompanies, Prisma.ScrapedCompaniesGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteScrapedCompanies(options?: Omit<(UseMutationOptions<(ScrapedCompanies | undefined), DefaultError, Prisma.ScrapedCompaniesDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ScrapedCompaniesDeleteArgs, DefaultError, ScrapedCompanies, true>('ScrapedCompanies', 'DELETE', `${endpoint}/scrapedCompanies/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ScrapedCompaniesDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ScrapedCompaniesDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ScrapedCompanies, Prisma.ScrapedCompaniesGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ScrapedCompaniesDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ScrapedCompanies, Prisma.ScrapedCompaniesGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyScrapedCompanies(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ScrapedCompaniesDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ScrapedCompaniesDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ScrapedCompanies', 'DELETE', `${endpoint}/scrapedCompanies/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ScrapedCompaniesDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ScrapedCompaniesDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ScrapedCompaniesDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesAggregateArgs, TQueryFnData = Prisma.GetScrapedCompaniesAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ScrapedCompaniesAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesAggregateArgs, TQueryFnData = Prisma.GetScrapedCompaniesAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ScrapedCompaniesAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/aggregate`, args, options, fetch);
}

export function useGroupByScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ScrapedCompaniesGroupByArgs['orderBy'] } : { orderBy?: Prisma.ScrapedCompaniesGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ScrapedCompaniesGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.ScrapedCompaniesGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.ScrapedCompaniesGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.ScrapedCompaniesGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ScrapedCompaniesGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ScrapedCompaniesGroupByArgs['orderBy'] } : { orderBy?: Prisma.ScrapedCompaniesGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ScrapedCompaniesGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.ScrapedCompaniesGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.ScrapedCompaniesGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.ScrapedCompaniesGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ScrapedCompaniesGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/groupBy`, args, options, fetch);
}

export function useCountScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ScrapedCompaniesCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ScrapedCompaniesCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/count`, args, options, fetch);
}

export function useSuspenseCountScrapedCompanies<TArgs extends Prisma.ScrapedCompaniesCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ScrapedCompaniesCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ScrapedCompaniesCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/count`, args, options, fetch);
}

export function useCheckScrapedCompanies<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ScrapedCompanies', `${endpoint}/scrapedCompanies/check`, args, options, fetch);
}
