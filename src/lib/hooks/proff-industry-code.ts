/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, ProffIndustryCode } from "@prisma/client";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateProffIndustryCode(options?: Omit<(UseMutationOptions<(ProffIndustryCode | undefined), DefaultError, Prisma.ProffIndustryCodeCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProffIndustryCodeCreateArgs, DefaultError, ProffIndustryCode, true>('ProffIndustryCode', 'POST', `${endpoint}/proffIndustryCode/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProffIndustryCodeCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProffIndustryCodeCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProffIndustryCode, Prisma.ProffIndustryCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProffIndustryCodeCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProffIndustryCode, Prisma.ProffIndustryCodeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyProffIndustryCode(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProffIndustryCodeCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProffIndustryCodeCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('ProffIndustryCode', 'POST', `${endpoint}/proffIndustryCode/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProffIndustryCodeCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProffIndustryCodeCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProffIndustryCodeCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeFindManyArgs, TQueryFnData = Array<Prisma.ProffIndustryCodeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProffIndustryCodeFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/findMany`, args, options, fetch);
}

export function useInfiniteFindManyProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeFindManyArgs, TQueryFnData = Array<Prisma.ProffIndustryCodeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProffIndustryCodeFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/findMany`, args, options, fetch);
}

export function useSuspenseFindManyProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeFindManyArgs, TQueryFnData = Array<Prisma.ProffIndustryCodeGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProffIndustryCodeFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeFindManyArgs, TQueryFnData = Array<Prisma.ProffIndustryCodeGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProffIndustryCodeFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/findMany`, args, options, fetch);
}

export function useFindUniqueProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeFindUniqueArgs, TQueryFnData = Prisma.ProffIndustryCodeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProffIndustryCodeFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeFindUniqueArgs, TQueryFnData = Prisma.ProffIndustryCodeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProffIndustryCodeFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/findUnique`, args, options, fetch);
}

export function useFindFirstProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeFindFirstArgs, TQueryFnData = Prisma.ProffIndustryCodeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProffIndustryCodeFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeFindFirstArgs, TQueryFnData = Prisma.ProffIndustryCodeGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProffIndustryCodeFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/findFirst`, args, options, fetch);
}

export function useUpdateProffIndustryCode(options?: Omit<(UseMutationOptions<(ProffIndustryCode | undefined), DefaultError, Prisma.ProffIndustryCodeUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProffIndustryCodeUpdateArgs, DefaultError, ProffIndustryCode, true>('ProffIndustryCode', 'PUT', `${endpoint}/proffIndustryCode/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProffIndustryCodeUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProffIndustryCodeUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProffIndustryCode, Prisma.ProffIndustryCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProffIndustryCodeUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProffIndustryCode, Prisma.ProffIndustryCodeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyProffIndustryCode(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProffIndustryCodeUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProffIndustryCodeUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('ProffIndustryCode', 'PUT', `${endpoint}/proffIndustryCode/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProffIndustryCodeUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProffIndustryCodeUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProffIndustryCodeUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertProffIndustryCode(options?: Omit<(UseMutationOptions<(ProffIndustryCode | undefined), DefaultError, Prisma.ProffIndustryCodeUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProffIndustryCodeUpsertArgs, DefaultError, ProffIndustryCode, true>('ProffIndustryCode', 'POST', `${endpoint}/proffIndustryCode/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProffIndustryCodeUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProffIndustryCodeUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProffIndustryCode, Prisma.ProffIndustryCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProffIndustryCodeUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProffIndustryCode, Prisma.ProffIndustryCodeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteProffIndustryCode(options?: Omit<(UseMutationOptions<(ProffIndustryCode | undefined), DefaultError, Prisma.ProffIndustryCodeDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProffIndustryCodeDeleteArgs, DefaultError, ProffIndustryCode, true>('ProffIndustryCode', 'DELETE', `${endpoint}/proffIndustryCode/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProffIndustryCodeDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProffIndustryCodeDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, ProffIndustryCode, Prisma.ProffIndustryCodeGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.ProffIndustryCodeDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, ProffIndustryCode, Prisma.ProffIndustryCodeGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyProffIndustryCode(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.ProffIndustryCodeDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.ProffIndustryCodeDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('ProffIndustryCode', 'DELETE', `${endpoint}/proffIndustryCode/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.ProffIndustryCodeDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.ProffIndustryCodeDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.ProffIndustryCodeDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeAggregateArgs, TQueryFnData = Prisma.GetProffIndustryCodeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProffIndustryCodeAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeAggregateArgs, TQueryFnData = Prisma.GetProffIndustryCodeAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.ProffIndustryCodeAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/aggregate`, args, options, fetch);
}

export function useGroupByProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ProffIndustryCodeGroupByArgs['orderBy'] } : { orderBy?: Prisma.ProffIndustryCodeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ProffIndustryCodeGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.ProffIndustryCodeGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.ProffIndustryCodeGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.ProffIndustryCodeGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ProffIndustryCodeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.ProffIndustryCodeGroupByArgs['orderBy'] } : { orderBy?: Prisma.ProffIndustryCodeGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.ProffIndustryCodeGroupByOutputType, TArgs['by']> &
    {
        [P in ((keyof TArgs) & (keyof Prisma.ProffIndustryCodeGroupByOutputType))]: P extends '_count'
        ? TArgs[P] extends boolean
        ? number
        : Prisma.GetScalarType<TArgs[P], Prisma.ProffIndustryCodeGroupByOutputType[P]>
        : Prisma.GetScalarType<TArgs[P], Prisma.ProffIndustryCodeGroupByOutputType[P]>
    }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.ProffIndustryCodeGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/groupBy`, args, options, fetch);
}

export function useCountProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ProffIndustryCodeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProffIndustryCodeCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/count`, args, options, fetch);
}

export function useSuspenseCountProffIndustryCode<TArgs extends Prisma.ProffIndustryCodeCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.ProffIndustryCodeCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.ProffIndustryCodeCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/count`, args, options, fetch);
}

export function useCheckProffIndustryCode<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; code?: string; name?: string; proffIndustryCodeId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('ProffIndustryCode', `${endpoint}/proffIndustryCode/check`, args, options, fetch);
}
